{"version":3,"sources":["components/Constant.js","components/Pokemontcg.js","components/Pokemon.js","App.js","reportWebVitals.js","index.js"],"names":["toFirstCharUppercase","name","charAt","toUpperCase","slice","useStyles","makeStyles","pokemontcgContainer","paddingTop","paddingLeft","paddingRight","cardMedia","margin","cardContent","textAlign","Pokemontcg","props","classes","history","useState","pokemonData","setPokemonData","filter","setFilter","useEffect","axios","get","then","response","data","pokeData","cards","forEach","pokemon","index","id","toLowerCase","pokemonImage","imageUrl","Navbar","bg","expand","Collapse","Nav","className","FormControl","type","placeholder","onChange","e","target","value","Grid","container","spacing","Object","keys","map","pokemonId","includes","item","xs","Card","onClick","push","CardMedia","image","style","width","height","CardContent","Typography","getPokemonCard","CircularProgress","Pokemon","match","params","console","log","Button","variant","App","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8ca8b80a.chunk.js","sourcesContent":["export const toFirstCharUppercase = (name) => name.charAt(0).toUpperCase() + name.slice(1);\n","/* eslint-disable react/prop-types */\nimport React, { useEffect, useState } from 'react';\nimport {\n  Grid, Card, CardMedia, CardContent, CircularProgress, Typography,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Navbar, Nav, FormControl } from 'react-bootstrap';\nimport axios from 'axios';\nimport { toFirstCharUppercase } from './Constant';\n\nconst useStyles = makeStyles(() => ({\n  pokemontcgContainer: {\n    paddingTop: '20px',\n    paddingLeft: '50px',\n    paddingRight: '50px',\n  },\n  cardMedia: {\n    margin: 'auto',\n  },\n  cardContent: {\n    textAlign: 'center',\n  },\n}));\nconst Pokemontcg = (props) => {\n  const classes = useStyles();\n  const { history } = props;\n  const [pokemonData, setPokemonData] = useState([]);\n  const [filter, setFilter] = useState('');\n\n  const handleKeyDown = (e) => {\n    setFilter(e.target.value.toLowerCase());\n  };\n\n  useEffect(() => {\n    axios.get('https://api.pokemontcg.io/v1/cards')\n      .then((response) => {\n        const { data } = response;\n        const pokeData = {};\n        data.cards.forEach((pokemon, index) => {\n          pokeData[index + 1] = {\n            id: index + 1,\n            name: pokemon.name.toLowerCase(),\n            pokemonImage: pokemon.imageUrl,\n          };\n        });\n        setPokemonData(pokeData);\n      });\n  }, []);\n\n  const getPokemonCard = (pokemonId) => {\n    const { id, name, pokemonImage } = pokemonData[pokemonId];\n    return (\n      <Grid item xs={4} key={pokemonId}>\n        <Card onClick={() => history.push(`/${id}`)}>\n          <CardMedia\n            className={classes.cardMedia}\n            image={pokemonImage}\n            style={{ width: '140px', height: '140px' }}\n          />\n          <CardContent className={classes.cardContent}>\n            <Typography>{`${id}. ${toFirstCharUppercase(name)}`}</Typography>\n          </CardContent>\n        </Card>\n      </Grid>\n    );\n  };\n\n  return (\n    <>\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\" />\n          <FormControl\n            type=\"text\"\n            placeholder=\"Enter pokemon\"\n            className=\"mr-sm-2\"\n            onChange={handleKeyDown}\n          />\n        </Navbar.Collapse>\n      </Navbar>\n\n      <hr />\n\n      {pokemonData ? (\n        <Grid container spacing={2} className={classes.pokemontcgContainer}>\n          {Object.keys(pokemonData).map(\n            (pokemonId) => pokemonData[pokemonId].name.includes(filter)\n                && getPokemonCard(pokemonId),\n          )}\n        </Grid>\n      ) : (\n        <CircularProgress />\n      )}\n    </>\n  );\n};\n\nexport default Pokemontcg;\n","/* eslint-disable react/prop-types */\nimport React, { useEffect } from 'react';\nimport { Button } from '@material-ui/core';\n\nconst Pokemon = (props) => {\n  const { match, history } = props;\n  const { params } = match;\n  const { pokemonId } = params;\n\n  useEffect(() => {\n    console.log(\n      { pokemonId },\n    );\n  }, [pokemonId]);\n\n  return (\n    <>\n      <Button variant=\"contained\" onClick={() => history.push('/')}>\n        Back to Pokemontcg\n      </Button>\n    </>\n  );\n};\n\nexport default Pokemon;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Pokemontcg from './components/Pokemontcg';\nimport Pokemon from './components/Pokemon';\n\nfunction App() {\n  return (\n    <div className=\"App-head\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" render={(props) => <Pokemontcg {...props} />} />\n          <Route\n            exact\n            path=\"/:pokemonId\"\n            render={(props) => <Pokemon {...props} />}\n          />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}