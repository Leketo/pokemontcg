{"version":3,"sources":["components/Constant.js","components/Pokemontcg.js","components/Pokemon.js","App.js","reportWebVitals.js","index.js"],"names":["toFirstCharUppercase","name","charAt","toUpperCase","slice","useStyles","makeStyles","pokemontcgContainer","paddingTop","paddingLeft","paddingRight","cardMedia","margin","cardContent","textAlign","Pokemontcg","props","classes","history","useState","pokemonData","setPokemonData","filter","setFilter","useEffect","axios","get","then","response","data","pokeData","cards","forEach","pokemon","index","id","toLowerCase","pokemonImage","imageUrl","pokeId","FormControl","size","type","placeholder","className","onChange","e","target","value","Grid","container","spacing","Object","keys","map","pokemonId","includes","item","xs","Card","onClick","push","CardMedia","image","style","width","height","CardContent","Typography","getPokemonCard","CircularProgress","Pokemon","match","params","setImage","namePokemon","setNamePokemon","setPokemon","card","catch","error","console","log","undefined","poke","generatePokemon","Button","variant","App","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0eb4c2e.chunk.js","sourcesContent":["export const toFirstCharUppercase = (name) => name.charAt(0).toUpperCase() + name.slice(1);\r\n","/* eslint-disable react/prop-types */\r\nimport React, { useEffect, useState } from 'react';\r\nimport {\r\n  Grid, Card, CardMedia, CardContent, CircularProgress, Typography,\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { FormControl } from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport { toFirstCharUppercase } from './Constant';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  pokemontcgContainer: {\r\n    paddingTop: '20px',\r\n    paddingLeft: '50px',\r\n    paddingRight: '50px',\r\n  },\r\n  cardMedia: {\r\n    margin: 'auto',\r\n  },\r\n  cardContent: {\r\n    textAlign: 'center',\r\n  },\r\n}));\r\nconst Pokemontcg = (props) => {\r\n  const classes = useStyles();\r\n  const { history } = props;\r\n  const [pokemonData, setPokemonData] = useState([]);\r\n  const [filter, setFilter] = useState('');\r\n\r\n  const handleKeyDown = (e) => {\r\n    setFilter(e.target.value.toLowerCase());\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios.get('https://api.pokemontcg.io/v1/cards')\r\n      .then((response) => {\r\n        const { data } = response;\r\n        const pokeData = {};\r\n        data.cards.forEach((pokemon, index) => {\r\n          pokeData[index + 1] = {\r\n            id: index + 1,\r\n            name: pokemon.name.toLowerCase(),\r\n            pokemonImage: pokemon.imageUrl,\r\n            pokeId: pokemon.id,\r\n          };\r\n        });\r\n        setPokemonData(pokeData);\r\n      });\r\n  }, []);\r\n\r\n  const getPokemonCard = (pokemonId) => {\r\n    const {\r\n      id, pokeId, name, pokemonImage,\r\n    } = pokemonData[pokemonId];\r\n    return (\r\n      <Grid item xs={2} key={pokemonId}>\r\n        <Card onClick={() => history.push(`/${pokeId}`)}>\r\n          <CardMedia\r\n            className={classes.cardMedia}\r\n            image={pokemonImage}\r\n            style={{ width: '120px', height: '170px' }}\r\n          />\r\n          <CardContent className={classes.cardContent}>\r\n            <Typography>{`${id}. ${toFirstCharUppercase(name)}`}</Typography>\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <FormControl\r\n        size=\"lg\"\r\n        type=\"text\"\r\n        placeholder=\"Enter pokemon\"\r\n        className=\"mr-sm-2\"\r\n        onChange={handleKeyDown}\r\n      />\r\n      {pokemonData ? (\r\n        <Grid container spacing={2} className={classes.pokemontcgContainer}>\r\n          {Object.keys(pokemonData).map(\r\n            (pokemonId) => pokemonData[pokemonId].name.includes(filter)\r\n                && getPokemonCard(pokemonId),\r\n          )}\r\n        </Grid>\r\n      ) : (\r\n        <CircularProgress />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Pokemontcg;\r\n","/* eslint-disable react/prop-types */\r\n/* eslint-disable arrow-body-style */\r\nimport React, { useEffect, useState } from 'react';\r\nimport {\r\n  Button, Card, CardMedia, CardContent, CircularProgress, Typography,\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport axios from 'axios';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  pokemontcgContainer: {\r\n    paddingTop: '20px',\r\n    paddingLeft: '50px',\r\n    paddingRight: '50px',\r\n  },\r\n  cardMedia: {\r\n    margin: 'auto',\r\n  },\r\n  cardContent: {\r\n    textAlign: 'center',\r\n  },\r\n}));\r\n\r\nconst Pokemon = (props) => {\r\n  const classes = useStyles();\r\n  const { match, history } = props;\r\n  const { params } = match;\r\n  const { pokemonId } = params;\r\n  const [image, setImage] = useState('');\r\n  const [namePokemon, setNamePokemon] = useState('');\r\n  const [pokemon, setPokemon] = useState({});\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`https://api.pokemontcg.io/v1/cards/${pokemonId}/`)\r\n      .then((response) => {\r\n        const { data } = response;\r\n        setImage(data.card.imageUrl);\r\n        setNamePokemon(data.card.name);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        setPokemon(false);\r\n      });\r\n  }, [pokemonId]);\r\n\r\n  const generatePokemon = (poke) => {\r\n    const { imageUrl } = poke;\r\n    return (\r\n      <>\r\n        <Card>\r\n          <CardMedia\r\n            className={classes.cardMedia}\r\n            image={image}\r\n            style={{ width: '220px', height: '270px' }}\r\n          />\r\n          <CardContent className={classes.cardContent}>\r\n            <Typography>{`${namePokemon}`}</Typography>\r\n          </CardContent>\r\n        </Card>\r\n        {imageUrl}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {pokemon === undefined && <CircularProgress />}\r\n      {pokemon !== undefined && pokemon && generatePokemon(pokemon)}\r\n      {pokemon === false && <Typography> Pokemon not found</Typography>}\r\n\r\n      {pokemon !== undefined && (\r\n        <Button variant=\"contained\" onClick={() => history.push('/')}>\r\n          Back to Pokemontcg\r\n        </Button>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Pokemon;\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Pokemontcg from './components/Pokemontcg';\nimport Pokemon from './components/Pokemon';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" render={(props) => <Pokemontcg {...props} />} />\n        <Route\n          exact\n          path=\"/:pokemonId\"\n          render={(props) => <Pokemon {...props} />}\n        />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}